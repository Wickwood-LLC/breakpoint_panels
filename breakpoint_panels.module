<?php
/**
 * @file
 * Breakpoint Panels for the Panels and Breakpoint modules.
 */

/**
 * Implements hook_menu().
 */
function breakpoint_panels_menu() {
  $items = array();
  $items['admin/config/user-interface/breakpoint_panels'] = array(
    'title' => 'Breakpoint Panels',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('breakpoint_panels_settings'),
    'access arguments' => array('administer breakpoints'),
  );
  $items['breakpoint_panels/%ctools_js/settings/form'] = array(
    'title' => t('Breakpoints Pane'),
    'page callback' => 'breakpoint_panels_modal_popup',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Settings form callback.
 */
function breakpoint_panels_pane_settings_form($style_settings) {
  $form = array();
  $bps = breakpoints_breakpoint_load_all_active();
  foreach ($bps as $name => $bp) {
    $form['pane_' . drupal_clean_css_identifier($bp->name)] = array(
      '#type' => 'checkbox',
      '#title' => filter_xss(t('Display ' . $bp->name)),
      '#default_value' => (isset($style_settings['pane_' . $name])) ? $style_settings['pane_' . $name] : TRUE
    );
  }

  return $form;
}


//Testing this new hook
function breakpoint_panels_panels_ipe_pane_links_alter(&$links, $pane, $display) {
  dpm($links);
  ctools_include('ajax');
  ctools_include('modal');
  ctools_modal_add_js();
  $links['global'] = array(
    'title' => t('Breakpoints!'),
    'href' => 'breakpoint_panels/nojs/settings/form',
    'attributes' => array(
      'class' => 'ctools-use-modal',
    ),
  );
}


function breakpoint_panels_modal_popup($js = NULL) {
  // degrade half-assed to no js
  if(!$js) {
    return drupal_get_form('breakpoint_panels_pane_settings_form');
  }
  // adelante!
  ctools_include('modal');
  ctools_include('ajax');
  $form_state = array(
    'title' => t('Breakpoints'),
    'ajax' => TRUE,
  );
  $output = ctools_modal_form_wrapper('breakpoint_panels_pane_settings_form', $form_state);
  if (!empty($form_state['executed'])) {
    // We'll just overwrite the form output if it was successful.
    $output = array();
    $output[] = ctools_modal_command_dismiss(t('Success!'));
    // If you want to leave a message and links:
    //$output[] = ctools_modal_command_display(t('Login Success'), '<div class="modal-message">Login successful. 
                      //    <a href="/modal/nojs/test">Go back</a>.</div>');
  }
  print ajax_render($output);
  exit;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function breakpoint_panels_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'panels') {
    return "plugins/$plugin_type";
  }
}

/**
 *
 * @see HOOK_theme()
 */
function breakpoint_panels_theme() {
  $theme = array();
  $theme['breakpoint_panels_breakpoint_pane_style_render_panel'] = array(
    'arguments' => array('content' => NULL, 'pane' => NULL, 'display' => NULL),
    'path' => 'plugins/styles/breakpoint_pane/breakpoint_pane.inc',

  );
  return $theme;
}

function breakpoint_panels_panels_pre_render($display) {
  $data = NULL;
   // Check if there is a valid resolution stored in the cookie.
  if (isset($_COOKIE['breakpoints'])) {
    $data = parseRPCookie($_COOKIE['breakpoints']);
  }
  if ($data) {
    drupal_add_js(array(
      'breakpoint_panels_breakpoint' => getBPConfig(),
    ), 'setting');
    $bps = breakpoints_breakpoint_load_all_active();
    foreach ($bps as $breakpoint) {
      if (!$breakpoint) {
        continue;
      }

      $conditions = parseBPBreakpoint($breakpoint->breakpoint);
      if (!$conditions) {
        continue;
      }
      $matches = array();
      $match = TRUE;
      foreach ($conditions as $cmd => $value) {

        switch ($cmd) {
          case 'width':
            $match = $data['width'] === $value;
            break;

          case 'min-width':
            $match = $data['width'] >= $value;
            break;

          case 'max-width':
            $match = $data['width'] <= $value;
            break;

          case 'height':
            $match = $data['height'] === $value;
            break;

          case 'min-height':
            $match = $data['height'] >= $value;
            break;

          case 'max-height':
            $match = $data['height'] <= $value;
            break;

          case 'device-width':
            $match = $data['device-width'] === $value;
            break;

          case 'min-device-width':
            $match = $data['device-width'] >= $value;
            break;

          case 'max-device-width':
            $match = $data['device-width'] <= $value;
            break;

          case 'device-height':
            $match = $data['device-height'] === $value;
            break;

          case 'min-device-height':
            $match = $data['device-height'] >= $value;
            break;

          case 'max-device-height':
            $match = $data['device-height'] <= $value;
            break;

          case 'aspect-ratio':
            $match = $data['width'] / $data['height'] === $value;
            break;

          case 'min-aspect-ratio':
            $match = $data['width'] / $data['height'] >= $value;
            break;

          case 'max-aspect-ratio':
            $match = $data['width'] / $data['height'] <= $value;
            break;

          case 'device-aspect-ratio':
            $match = $data['device-width'] / $data['device-height'] === $value;
            break;

          case 'min-device-aspect-ratio':
            $match = $data['device-width'] / $data['device-height'] >= $value;
            break;

          case 'max-device-aspect-ratio':
            $match = $data['device-width'] / $data['device-height'] <= $value;
            break;

          default:
            // Unsupported.
            break;
        }

        if (!$match) break;
      }

      if ($match) {
        if (variable_get('breakpoint_panels_load_hidden', "no")=="yes" || (variable_get('breakpoint_panels_load_hidden_admins', "no")=="yes" && user_access('administer breakpoints'))) {
          $rpadmin = TRUE;
        }
        foreach ($display->content as $k => $pane) {
          if (isset($pane->style['settings']['pane_' . drupal_clean_css_identifier($breakpoint->name)])
          && $pane->style['settings']['pane_' . drupal_clean_css_identifier($breakpoint->name)] == 0
          && !isset($rpadmin)) {
            $pane->shown = 0;
          }
        }
      }
    }
  }
}

function parseBPBreakpoint($query) {
  $query = str_replace(' ', '', $query);

  preg_match_all('/\(([a-z\-]+)\:(.+?)\)/', $query, $matches);

  $point = array();
  for ($i = 0; $i < count($matches[0]); $i++) {
    $cmd = $matches[1][$i];
    $value = $matches[2][$i];

    switch ($cmd) {
      case 'width':
      case 'min-width':
      case 'max-width':
      case 'height':
      case 'min-height':
      case 'max-height':
      case 'device-width':
      case 'min-device-width':
      case 'max-device-width':
      case 'device-height':
      case 'min-device-height':
      case 'max-device-height':
        // Only px values are supported.
        if (strpos($value, 'px') !== FALSE) {
          $point[$cmd] = (int) str_replace('px', '', $value);
        }
        break;

      case 'aspect-ratio':
      case 'min-aspect-ratio':
      case 'max-aspect-ratio':
      case 'device-aspect-ratio':
      case 'min-device-aspect-ratio':
      case 'max-device-aspect-ratio':
        $parts = explode('/', $value);

        if (count($parts) === 2 && is_numeric($parts[0]) && is_numeric($parts[1])) {
          $point[$cmd] = (float) $parts[0] / (float) $parts[1];
        }

        break;

      default:
        // Unsupported.
        break;
    }
  }
  return count($point) ? $point : FALSE;
}

function parseRPCookie($cookie) {
  $data = array();

  $parts = explode('|', $cookie);

  if (count($parts) !== 2) {
    return FALSE;
  }

  $resParts = explode('x', $parts[0]);
  if (!(count($resParts) === 2
    && is_numeric($resParts[0])
    && is_numeric($resParts[1]))
  ) {
    return FALSE;
  }

  $data['width'] = (int) $resParts[0];
  $data['height'] = (int) $resParts[1];

  $resParts = explode('x', $parts[1]);
  if (!(count($resParts) === 2
    && is_numeric($resParts[0])
    && is_numeric($resParts[1]))
  ) {
    return FALSE;
  }

  $data['device-width'] = (int) $resParts[0];
  $data['device-height'] = (int) $resParts[1];

  return $data;
}

function getBPConfig() {
  $conf = array();

  $valid = array(
    'width',
    'min-width',
    'max-width',
    'height',
    'min-height',
    'max-height',
    'aspect-ratio',
    'min-aspect-ratio',
    'max-aspect-ratio',
  );


  $bps = breakpoints_breakpoint_load_all_active();
  foreach ($bps as $breakpoint) {
    if (!$breakpoint) continue;

    $conditions = parseBPBreakpoint($breakpoint->breakpoint);

    $point = array();

    foreach ($conditions as $cmd => $value) {
      if (in_array($cmd, $valid)) {
        $point[$cmd] = $value;
      }
    }

    if (count($point)) {
      $conf[$breakpoint->machine_name] = $point;
      $conf[$breakpoint->machine_name]['bp'] = $breakpoint->breakpoint;
      $conf[$breakpoint->machine_name]['css'] = 'hide_' . drupal_clean_css_identifier($breakpoint->name);
    }
    $conf['autoload'] = (variable_get('breakpoint_panels_breakpoint_reload', "no")!="no") ? TRUE : FALSE;
  }

  return $conf;
}


/**
 * Menu callback for settings form.
 */
function breakpoint_panels_settings($form, $form_state) {
  $form['breakpoint_panels_load_hidden_admins'] = array(
    '#title' => t('Load Hidden for Admins (recommended)'),
    '#type' => 'radios',
    '#options' => array(
      "no" => t("Don't Load"),
      "yes" => t('Load Hidden'),
    ),
    '#default_value' => variable_get('breakpoint_panels_load_hidden_admins', "yes"),
    '#description' => t('If selected, content will be loaded, but hidden via css for layout purposes.'),
  );
  $form['breakpoint_panels_load_hidden'] = array(
    '#title' => t('Load Hidden'),
    '#type' => 'radios',
    '#options' => array(
      "no" => t("Don't Load"),
      "yes" => t('Load Hidden'),
    ),
    '#default_value' => variable_get('breakpoint_panels_load_hidden', "no"),
    '#description' => t('If selected, content will be loaded, but hidden via css for development purposes.'),
  );
  $form['breakpoint_panels_breakpoint_reload'] = array(
    '#title' => t('Auto Reload'),
    '#type' => 'radios',
    '#options' => array(
      "no" => t("Don't Auto Reload"),
      "yes" => t('Auto Load'),
    ),
    '#default_value' => variable_get('breakpoint_panels_breakpoint_reload', "no"),
    '#description' => t('Window will be reloaded when a breakpoint is activated')
  );
  return system_settings_form($form);
}