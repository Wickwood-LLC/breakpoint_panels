<?php
/**
 * @file
 * Breakpoint Panels for the Panels and Breakpoint modules.
 */

/**
 * Implements hook_menu().
 */
function breakpoint_panels_menu() {
  $items = array();
  $items['admin/config/user-interface/breakpoint_panels'] = array(
    'title' => 'Breakpoint Panels',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('breakpoint_panels_settings'),
    'access arguments' => array('administer breakpoints'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['breakpoint_panels/%ctools_js/settings/form/%/%'] = array(
    'title' => t('Breakpoints Pane'),
    'page callback' => 'breakpoint_panels_modal_popup',
    'page arguments' => array(1,4,5),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['breakpoint-panels/get-pane/%/%'] = array(
    'title' => 'Breakpoint Panels AJAX pane handler',
    'page callback' => 'breakpoint_panels_panels_pane_handler',
    'page arguments' => array(2, 3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Settings form callback.
 */
function breakpoint_panels_pane_settings_form($style_settings, $form_state) {
  $form = array();
  $bps = breakpoints_breakpoint_load_all_active();
  $pid = $form_state['pane_id'];
  $did = $form_state['display_id'];
  $panel = panels_load_display($did);
  $pane = $panel->content[$pid];
  foreach ($bps as $name => $bp) {
    $form['pane_' . drupal_clean_css_identifier($bp->name)] = array(
      '#type' => 'checkbox',
      '#title' => filter_xss(t('Display ' . $bp->name)),
      '#default_value' => ($pane->configuration['breakpoints']) ?  $pane->configuration['breakpoints'][$bp->name] : TRUE
    );
  }
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  $form['pane_id'] = array(
    '#type' => 'hidden',
    '#value' => $pid,
  );
  $form['display_id'] = array(
    '#type' => 'hidden',
    '#value' => $did,
  );
  return $form;
}

function breakpoint_panels_pane_settings_form_submit(&$form, &$form_state) {
  $display_id = $form['display_id']['#value'];
  $pane_id = $form['pane_id']['#value'];
  $panel = panels_load_display($display_id);
  $pane = $panel->content[$pane_id];
  $bps = breakpoints_breakpoint_load_all_active();
  $pane->configuration['breakpoints'] = array();
  foreach ($bps as $breakpoint) {
    if (!$breakpoint) {
      continue;
    }
    $pane->configuration['breakpoints'][$breakpoint->name] = $form['pane_' . $breakpoint->name]['#value'];
  }
  $panel->content[$pane_id] = $pane;
  panels_save_display($panel);
  dpm($panel);
  $form_state['message'] = t('fixed');

}

//Testing this new hook
function breakpoint_panels_panels_ipe_pane_links_alter(&$links, $pane, $display) {
  $links['global'] = array(
    'title' => t('Breakpoints!'),
    'href' => 'breakpoint_panels/nojs/settings/form/' . $pane['pane']->did . '/' . $pane['pane']->pid,
    'attributes' => array(
      'class' => 'ctools-use-modal ctools-modal-modal-popup-small',
    ),
  );
}


function breakpoint_panels_modal_popup($js = NULL, $dis_id, $pane_id) {
  // degrade half-assed to no js
  if(!$js) {
    return drupal_get_form('breakpoint_panels_pane_settings_form', null, $pane_id);
  }
  ctools_include('modal');
  ctools_include('ajax');
  $form_state = array(
    'title' => t('Breakpoints'),
    'ajax' => TRUE,
    'pane_id' => $pane_id,
    'display_id' => $dis_id,
  );
  $output = ctools_modal_form_wrapper('breakpoint_panels_pane_settings_form', $form_state);
  if (!empty($form_state['executed'])) {
    // We'll just overwrite the form output if it was successful.
    $output = array();
    //$output[] = ctools_modal_command_dismiss(t('Success!'));
    // If you want to leave a message and links:
    $output[] = ctools_modal_command_display(t('Login Success'), '<div class="modal-message">Login successful. <a href="/modal/nojs/test">Go back</a>.</div>');
  }
  print ajax_render($output);
  exit;
}

/**
 * Render callback.
 *
 * @ingroup themeable
 */
function theme_breakpoint_panels_render_pane($vars) {
  if ($path = libraries_get_path('enquire.js')) {
    drupal_add_js($path . '/enquire.min.js');
  }
  if ($path = libraries_get_path('matchMedia.js')) {
    drupal_add_js($path . '/matchMedia.js');
  }
  drupal_add_js(drupal_get_path('module', 'breakpoint_panels') . '/plugins/styles/breakpoint_pane/breakpoint_pane.js');
  $content = $vars['content'];
  $pane = $vars['pane'];
  $display = $vars['display'];
  $settings = $vars['settings'];

  if (empty($content->content)) {
    return;
  }
  $bps = breakpoints_breakpoint_load_all_active();
  $ipemessage = "";
  $hides = array();
  $css = "";
  foreach ($bps as $name => $bp) {
    $clean = drupal_clean_css_identifier($bp->name);
    if (empty($settings['pane_' . $clean])) {
      array_push($hides, 'hide_' . $clean);
      $ipemessage .= '<br />Hidden from ' . $bp->name;
    }
    $css .= "@media " . $bp->breakpoint . " { " . '.hide_' . $clean . " { display:none } }\n .panels-ipe-editing " . '.hide_' . $clean . " { display:block }\n";
  }
  drupal_add_css($css, array('group' => CSS_DEFAULT, 'type' => 'inline'));
  $ipemessage .= (!empty($ipemessage)) ? '<br /><br />' : '';

  $themed = theme('panels_pane', array('content' => $content, 'pane' => $pane, 'display' => $display));
  $classes= "";
  foreach ($hides as $hide) {
    $classes .= ' ' . $hide;
  }
  $output = "<div class='$classes'>";$output .= '<div class="ipemessage">' . $ipemessage . '</div>';
  $output .= $themed;
  $output .= '</div>';
  drupal_add_css(drupal_get_path('module', 'breakpoint_panels') . '/plugins/styles/breakpoint_pane/breakpoint_pane.css', array('type' => 'file', 'media' => 'screen'));
  return $output;
}

// /**
//  * Implements hook_ctools_plugin_directory().
//  */
// function breakpoint_panels_ctools_plugin_directory($owner, $plugin_type) {
//   if ($owner == 'panels') {
//     return "plugins/$plugin_type";
//   }
// }

/**
 *
 * @see HOOK_theme()
 */
function breakpoint_panels_theme() {
  $theme = array();
  $theme['theme_breakpoint_panels_render_pane'] = array(
    'arguments' => array('content' => NULL, 'pane' => NULL, 'display' => NULL),
  );
  return $theme;
}

function breakpoint_panels_panels_pre_render($display) {
  $data = NULL;
   // Check if there is a valid resolution stored in the cookie.
  if (isset($_COOKIE['breakpoints'])) {
    $data = parseRPCookie($_COOKIE['breakpoints']);
  }
  if ($data) {
    drupal_add_js(array(
      'breakpoint_panels_breakpoint' => getBPConfig(),
    ), 'setting');
    $bps = breakpoints_breakpoint_load_all_active();
    foreach ($bps as $breakpoint) {
      if (!$breakpoint) {
        continue;
      }

      $conditions = parseBPBreakpoint($breakpoint->breakpoint);
      if (!$conditions) {
        continue;
      }
      $matches = array();
      $match = TRUE;
      foreach ($conditions as $cmd => $value) {

        switch ($cmd) {
          case 'width':
            $match = $data['width'] === $value;
            break;

          case 'min-width':
            $match = $data['width'] >= $value;
            break;

          case 'max-width':
            $match = $data['width'] <= $value;
            break;

          case 'height':
            $match = $data['height'] === $value;
            break;

          case 'min-height':
            $match = $data['height'] >= $value;
            break;

          case 'max-height':
            $match = $data['height'] <= $value;
            break;

          case 'device-width':
            $match = $data['device-width'] === $value;
            break;

          case 'min-device-width':
            $match = $data['device-width'] >= $value;
            break;

          case 'max-device-width':
            $match = $data['device-width'] <= $value;
            break;

          case 'device-height':
            $match = $data['device-height'] === $value;
            break;

          case 'min-device-height':
            $match = $data['device-height'] >= $value;
            break;

          case 'max-device-height':
            $match = $data['device-height'] <= $value;
            break;

          case 'aspect-ratio':
            $match = $data['width'] / $data['height'] === $value;
            break;

          case 'min-aspect-ratio':
            $match = $data['width'] / $data['height'] >= $value;
            break;

          case 'max-aspect-ratio':
            $match = $data['width'] / $data['height'] <= $value;
            break;

          case 'device-aspect-ratio':
            $match = $data['device-width'] / $data['device-height'] === $value;
            break;

          case 'min-device-aspect-ratio':
            $match = $data['device-width'] / $data['device-height'] >= $value;
            break;

          case 'max-device-aspect-ratio':
            $match = $data['device-width'] / $data['device-height'] <= $value;
            break;

          default:
            // Unsupported.
            break;
        }

        if (!$match) break;
      }

      if ($match) {
        if (variable_get('breakpoint_panels_load_hidden', "no")=="yes" || (variable_get('breakpoint_panels_load_hidden_admins', "no")=="yes" && user_access('administer breakpoints'))) {
          $rpadmin = TRUE;
        }
        foreach ($display->content as $k => $pane) {
          if (isset($pane->style['settings']['pane_' . drupal_clean_css_identifier($breakpoint->name)])
          && $pane->style['settings']['pane_' . drupal_clean_css_identifier($breakpoint->name)] == 0
          && !isset($rpadmin)) {
            $pane->shown = 0;
          }
        }
      }
    }
  }
}

function parseBPBreakpoint($query) {
  $query = str_replace(' ', '', $query);

  preg_match_all('/\(([a-z\-]+)\:(.+?)\)/', $query, $matches);

  $point = array();
  for ($i = 0; $i < count($matches[0]); $i++) {
    $cmd = $matches[1][$i];
    $value = $matches[2][$i];

    switch ($cmd) {
      case 'width':
      case 'min-width':
      case 'max-width':
      case 'height':
      case 'min-height':
      case 'max-height':
      case 'device-width':
      case 'min-device-width':
      case 'max-device-width':
      case 'device-height':
      case 'min-device-height':
      case 'max-device-height':
        // Only px values are supported.
        if (strpos($value, 'px') !== FALSE) {
          $point[$cmd] = (int) str_replace('px', '', $value);
        }
        break;

      case 'aspect-ratio':
      case 'min-aspect-ratio':
      case 'max-aspect-ratio':
      case 'device-aspect-ratio':
      case 'min-device-aspect-ratio':
      case 'max-device-aspect-ratio':
        $parts = explode('/', $value);

        if (count($parts) === 2 && is_numeric($parts[0]) && is_numeric($parts[1])) {
          $point[$cmd] = (float) $parts[0] / (float) $parts[1];
        }

        break;

      default:
        // Unsupported.
        break;
    }
  }
  return count($point) ? $point : FALSE;
}

function parseRPCookie($cookie) {
  $data = array();

  $parts = explode('|', $cookie);

  if (count($parts) !== 2) {
    return FALSE;
  }

  $resParts = explode('x', $parts[0]);
  if (!(count($resParts) === 2
    && is_numeric($resParts[0])
    && is_numeric($resParts[1]))
  ) {
    return FALSE;
  }

  $data['width'] = (int) $resParts[0];
  $data['height'] = (int) $resParts[1];

  $resParts = explode('x', $parts[1]);
  if (!(count($resParts) === 2
    && is_numeric($resParts[0])
    && is_numeric($resParts[1]))
  ) {
    return FALSE;
  }

  $data['device-width'] = (int) $resParts[0];
  $data['device-height'] = (int) $resParts[1];

  return $data;
}

function getBPConfig() {
  $conf = array();

  $valid = array(
    'width',
    'min-width',
    'max-width',
    'height',
    'min-height',
    'max-height',
    'aspect-ratio',
    'min-aspect-ratio',
    'max-aspect-ratio',
  );


  $bps = breakpoints_breakpoint_load_all_active();
  foreach ($bps as $breakpoint) {
    if (!$breakpoint) continue;

    $conditions = parseBPBreakpoint($breakpoint->breakpoint);

    $point = array();

    foreach ($conditions as $cmd => $value) {
      if (in_array($cmd, $valid)) {
        $point[$cmd] = $value;
      }
    }

    if (count($point)) {
      $conf[$breakpoint->machine_name] = $point;
      $conf[$breakpoint->machine_name]['bp'] = $breakpoint->breakpoint;
      $conf[$breakpoint->machine_name]['css'] = 'hide_' . drupal_clean_css_identifier($breakpoint->name);
    }
    $conf['autoload'] = (variable_get('breakpoint_panels_breakpoint_reload', "no")!="no") ? TRUE : FALSE;
  }

  return $conf;
}


/**
 * Menu callback for settings form.
 */
function breakpoint_panels_settings($form, $form_state) {
  $form['breakpoint_panels_load_hidden_admins'] = array(
    '#title' => t('Load Hidden for Admins (recommended)'),
    '#type' => 'radios',
    '#options' => array(
      "no" => t("Don't Load"),
      "yes" => t('Load Hidden'),
    ),
    '#default_value' => variable_get('breakpoint_panels_load_hidden_admins', "yes"),
    '#description' => t('If selected, content will be loaded, but hidden via css for layout purposes.'),
  );
  $form['breakpoint_panels_load_hidden'] = array(
    '#title' => t('Load Hidden'),
    '#type' => 'radios',
    '#options' => array(
      "no" => t("Don't Load"),
      "yes" => t('Load Hidden'),
    ),
    '#default_value' => variable_get('breakpoint_panels_load_hidden', "no"),
    '#description' => t('If selected, content will be loaded, but hidden via css for development purposes.'),
  );
  $form['breakpoint_panels_breakpoint_reload'] = array(
    '#title' => t('Auto Reload'),
    '#type' => 'radios',
    '#options' => array(
      "no" => t("Don't Auto Reload"),
      "yes" => t('Auto Load'),
    ),
    '#default_value' => variable_get('breakpoint_panels_breakpoint_reload', "no"),
    '#description' => t('Window will be reloaded when a breakpoint is activated')
  );
  return system_settings_form($form);
}

/**
 * Menu handler to serve individual panel-panes via AJAX.
 *
 * If the pane uses context, the task_name, context_string and q variables will
 * be set.
 */
function breakpoint_panels_panels_pane_handler($display_id, $pane_id, $task_name = NULL, $context_string = NULL, $request_q = '') {

  ctools_include('plugins', 'panels');
  ctools_include('content');

  $context_args = array();
  if (!empty($request_q)) {
    $context_args = breakpoint_panels_decode_query($request_q);
  }

  $display = panels_load_display($display_id);

  if (!is_null($task_name)) {
    // Get the context for this pane.
    list($args, $contexts) = breakpoint_panels_panels_get_task_context($task_name);

    $display->context = $contexts;
    $display->args = $args;
  }

  $pane = $display->content[$pane_id];

  // Set flag so that we don't rewrite content.
  $pane->ajax_rendering = TRUE;
  $renderer = panels_get_renderer_handler($display->renderer, $display);

  $variables = array(
    'content' => $renderer->render_pane_content($pane),
    'pane' => $pane,
    'display' => $display,
  );

  echo theme('panels_pane', $variables);

  die();
}

/**
 * Decodes a serialized query string.
 *
 * Also sets $_GET and $_REQUEST variables.
 *
 * @param string $query
 *   A query string that is serialized encoded and base64 encoded.
 *
 * @return array
 *   The decoded query array.
 */
function breakpoint_panels_decode_query($query) {
  $query = unserialize(base64_decode($query));
  if ($query) {
    foreach ($query as $name => $value) {
      $_GET[$name] = $value;
      $_REQUEST[$name] = $value;
    }
  }
  return $query;
}

/**
 * Implements hook_panels_pane_content_alter().
 */
function breakpoint_panels_panels_pane_content_alter($content, $pane, $args, $context) {
  if ($pane->style['style'] != 'breakpoint_panels') {
    return;
  }
  // Don't rewrite content. This is the ajax call.
  if (!empty($pane->ajax_rendering)) {
    return;
  }

  $display = panels_get_current_page_display();

  // The cache-key variable is set by the panel-context render function.
  list($context, $task_name, $handler_name) = explode(':', $display->cache_key);

  // Build the esi tag.
  $url = "breakpoint-panels/get-pane/{$pane->did}/{$pane->pid}";
  if (array_key_exists('context', $pane->configuration)) {
    // Add the page-manager task name.
    $url .= '/' . $task_name;
    // Add the name of the context which is supplied to this pane.
    $url .= '/' . $pane->configuration['context'];
  }
  else {
    // Add dummy strings so I keep the same order in the parser.
    // Add the page-manager task name.
    $url .= '/n';
    // Add the name of the context which is supplied to this pane.
    $url .= '/n';
  }

  $query_key = base64_encode(serialize($_GET));
  if (!empty($query_key)) {
    $url .= '/' . $query_key;
  }

  $url = url($url, array('query' => array('destination' => url($_GET['q']), 'redirect' => url($_GET['q']))));
  $id = uniqid('breakpoint-panels-pane-' . $pane->pid . '-');

  unset($content->title);

  $content->content = '<div id="' . $id . '" class="ajax-pane" src="' . $url . '">&nbsp;</div>';

  $content->use_ajax_render = TRUE;
}

/**
 * Looks up the menu handler for a URL, and provides the correct contexts.
 *
 * Each of the panel task plugins provides a default context based on the menu
 * path.
 */
function breakpoint_panels_panels_get_task_context($task_name) {
  $task = page_manager_get_task($task_name);

  // Invoke the module's hook_esi_get_context_arguments to get the context
  // provided by that task.
  $context_arguments = module_invoke($task['module'], 'breakpoint_panels_get_context_arguments', $task['name']);

  // Parse the arguments into context objects.
  ctools_include('context');
  ctools_include('context-task-handler');
  $contexts = ctools_context_handler_get_task_contexts($task, '', $context_arguments);

  return array($context_arguments, $contexts);
}

/**
 * Implements hook_breakpoint_panels_get_context_arguments().
 *
 * On behalf implementation of Ajax panes api for page_manager.module.
 */
function page_manager_breakpoint_panels_get_context_arguments($task_name) {
  switch ($task_name) {
    // The blog, poll, and contact_site tasks don't provide default context.
    case 'blog':
    case 'poll':
    case 'contact_site':
      return array();

    // The blog_user, and contact_user tasks provide a user-object.
    case 'blog_user':
    case 'contact_user':
      $uid = arg(1);
      $account = user_load($uid);
      return array($account);

    // The comment_reply task provide a node object and a comment CID.
    case 'comment_reply':
      // Path is comment/reply/%node
      $nid = arg(2);
      $pid = arg(3);
      $node = node_load($nid);
      return array($node, $pid);

    // The node_edit and node_view tasks provide a node object.
    case 'node_edit':
    case 'node_view':
      $nid = arg(1);
      $node = node_load($nid);
      return array($nid);

    case 'search':
      // @todo return array($keys);
    case 'term_view':
      // @todo return array($terms, $depth);
  }
}
